            START WITH THE STEPS 


 1 - SELECT          - * , COUNTRY COUNT(*) , DISTINCT ,NOW(), AGE(NOW(),DATE_OF_BIRTH) AS AGE ,AS, MIN , MAX , AVERAGE , SUM , nullif(100,200)

 2 - FROM PEOPLE     - WHERE , IN , BETWEEN , AND , OR , LIKE a__%; , ILIKE __a% , ADD PRIMARY KEY(column_name) , UNIQUE(), FOREIGN KEY()

 3 - GROUP BY, HAVING ,ORDER BY,AS,ON CONFLICT D0 NOTHING, ON CONFLICT()SET EMAIL=EXLUDED.EMAIL; 

 4 - OFFSET,LIMIT,OFFSET by 5;




ALTER , CREATE , DROP   - TABLES 

INSERT, UPDATE , DELETE - RECORDS



JOIN
    when we join two tables NEVER USE " AS " AFTER TABLE_NAME -ie
    join emp e on e.emp_id=d.emp_id



IN CONCAT ( " " , COUNT(*) , lower(occupation) , "s" )  = WE CAN USE MULTIPLE EXPRESSIONS - INORDER TO how we can  DISPLAY PARTICULAR TYPE OF RECORD
   - so we use       count(*)   here             inorder to further use group by (occupation) rows
   - so can we use   count(occupation)       group by occupation 


WITH GROUP BY CLAUSE = 
  .we use the same column_name when we select the column_name 
  .otherwise we need to use AGGREGATE FUNCTIONS for other column_name
  .we can't use " WHERE clause " with group by (USE IT BEFORE GROUP BY CLAUSE), we use HAVING clause - as having implements on groups of table
                    
  SELECT count(dept) FROM EMP GROUP BY dept;
  SELECT COUNTRY, COUNT(*) FROM PEOPLE GROUP BY COUNTRY HAVING COUNT(*) > 1000;  )
  SELECT COUNT(DISTINCT S.HACKERS) FROM SUBMISSIONS                                  = Inorder to use 2 aggregate functions - COUNT (& DISTINCT column_name)



JOIN TABLE WITH GROUP BY CLAUSE - Q The total score of a hacker is the sum of their maximum scores for all of the challenges - print total score

  SELECT m.hacker_id, h.name, SUM(m.score) AS total_score FROM
  (SELECT hacker_id, challenge_id, MAX(score) AS score FROM Submissions GROUP BY hacker_id, challenge_id) AS m  
  JOIN Hackers AS h ON m.hacker_id = h.hacker_id 
  GROUP By m.hacker_id, h.name
  HAVING total_score > 0 
  order by total_score desc , m.hacker_id


UNION = Combines two rows   from two tables and displays in a single row
JOIN  = Combines two column from two tables and displays as a single column with matching columns
   - Always use alias with the column_name inorder to not be ambigious for the column_name
   - Both inner join queries and parent_child queries SYNTAX can work-inorder to join the tables (using alias with both methods- COUNTRY AS co = WITH JOIN , COUNTRY co)

   use REPLACE for replacing name for records
   use AS      for changing  name for column_names 


COUNT(field_name) = counts values only (if there is NULL in record - it won't count it same)
COUNT(*)          = counts all records (even if there is NULL IN RECORDS - it will count it)

I
  WITH RESULT AS 

   (   SELECT  SALARY , DENSE_RANK () OVER (ORDER BY SALARY DESC) AS column_for_dense                = dense_rank provides row_num for each distinct value from the record
       from employees; 

   )
   SELECT DISTINCT(SALARY) FROM RESULT WHERE SALARY.column_for_dense = 2                     (2=n)                = finding the n highest salary by denserank(which  GIVES RANK TO SALARY)\
                                                                                                              (when we use row_num it will give row_num to duplicate values as well so it wont work)    
 
II
   SELECT TOP 1 SALARY FROM (SELECT distinct TOP 2 SALARY FROM EMPLOYEES ORDER BY SALARY DESC) result ORDER BY SALARY
   = selecting the max or top1 salary from >     = selecting top  2  salaries  from employees 
     where here order is set by ASC             = & ordern it by salary in DESC will bring highest salary and 
                                                = selecting top 2 will select the 1 & 2 salary from employees  


III               BEST WAY TO FIND THE (Nth) Highest salary from table;

  SELECT salary  from employeeinfo order by salary desc limit 2,1;     = 3 highest salary

  limit  1,1  = means  FETCH first row after the 1(first) row inorder to fing the 2 highest salary from ur   table]
  [limit 2,1, = means  FETCH one row  after the 2(second) row inorder to find the 3 highest salary from your table 
  limit  4,1  = means  FETCH one row  after the 4(fourth) row inorder to find the 5 highest salary form ur   table)]


IV             FIND N HIGHEST SALARY WITHOUT TOP/LIMIT KEYWORD

  select salary from emolpoyeee as e1 where n-1 = (select count(distinct salary) from employees as e2 where e2.salary > e1.salary); 


IS NULL = shows only records with NULL value in the column (where city IS NULL); OR (WHERE CITY IS NOT NULL);


FETCH ONLY THE FIRST NAME FROM THE FULLNAME
   select substr(fullname , 0 , LOCATE(' ',fullname )) from employee;



RECORDS (functions) in NUTSHELL
  [concat,concat_ws,ascii,length,  insert,replace,stuff,   locate,patindex,instr,     left,right,substring,lpad,rpad,ltrim,rtrim,trim,lcase,upper,
   split,reverse,strcmp,repeat]



IF STATEMENTS    = used for single argument    (if this , then that)     AS result
CASE STATEMENTS  = used for multiple arguments (when , then ,else, end ) AS result 


  SELECT SUBMISSION_DATE,
  (SELECT COUNT(DISTINCT HACKER_ID)  
   FROM SUBMISSIONS S2  
   WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE AND    
  (SELECT COUNT(DISTINCT S3.SUBMISSION_DATE) 
   FROM SUBMISSIONS S3 WHERE S3.HACKER_ID = S2.HACKER_ID AND S3.SUBMISSION_DATE < S1.SUBMISSION_DATE) = DATEDIFF(S1.SUBMISSION_DATE , '2016-03-01')),
  (SELECT HACKER_ID FROM SUBMISSIONS S2 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE 
  GROUP BY HACKER_ID ORDER BY COUNT(SUBMISSION_ID) DESC, HACKER_ID LIMIT 1) AS TMP,
  (SELECT NAME FROM HACKERS WHERE HACKER_ID = TMP)
  FROM
  (SELECT DISTINCT SUBMISSION_DATE FROM SUBMISSIONS) S1
  GROUP BY SUBMISSION_DATE;


MAKE THE TRIANGLE
   SET @number = 21;
   SELECT REPEAT('* ', @number := @number - 1) FROM information_schema.tables LIMIT 20;
  







                                                                 