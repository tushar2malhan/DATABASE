                         MONGO DB

is a nosql database -which is an open source 
stores data  json -type document format [java script language]
have no relational data  = it is very flexible enough - which can mix data of tables
(can give extra field or column to a particular record - name  to all , age extra for one record)
mongo shell   = CLI of the database
mongo compass = GUI 
application   = choose programming language 

Connect to alias > create a cluster with whitelist ip and users > connect via compass or shell or application > choose os & download it > >

  MONGO DB        RDBMS in sql

Collections =   tables in    SQL	
Documents   =   row records of the table in SQL [which is key/value data]
field       =   column record data
table join  =   Embedded documents

               SYNTAX

first:"ajay"
course:["mca","bba"]        #ARRAY[]
address:{
         street:"XYZ",
         pincode:"110044"    #OBJECT{}
        }   
contacts:[
{name:"ajay",class:"mca"},   #ARRAY OF OBJECT
{name:"ram",class:"mca"}

]

  

show dbs            - shows  all databases made
use databasename    - connect to database [creates new database if not present]
show collections    - checks tables
db.createCollection("student");                   -  AS U LOGIN THE DATABASE TEST - IT create table in  the database school
db.createCollection("users");                     -  AS U LOGIN THE DATABASE TEST - IT creates table in  the database school

                  


                    db.users.insert(),update(),remove(),find() =   |   db.collection_name.value(arguments here)     |
                   THUS U SET ARGUMENTS INSIDE VALUES() -INORDER TO BE COMPARED ,DELETED, INSERTED OR FIND
                    ({}) - single record
                    ({:{}})-set arguments for single record
                    ([{}])- multiple records
                   


      


db.users.insertOne   ({})    - insert field and 1 record-document ({name:"max",age:29})
db.users.insertMany ([{}])   - insert field and records -documents ([{name:"manuel"},{name:"chris",age:25}])        # [] = called array , needed inorder to insert more than one record

db.student.insert({first:"tushar",last:"malhan"});- create a record in collection (table of student)     # can use only insert as wel

db.student.find();                                - shows the records created in student table                          = ({});

db.student.find({age:26 });                       - it finds and shows all data whose age = 26
db.student.find({age:{$gt:26} });                 - it shows records who age is greater than 26 
db.users.insert({name:'tushii',age:30,address:{street:'first street' ,city:'new orleans'}});  - give arguement inside values ({ :{}})
db.users.find({"adress.street":"first street"});  - finds the document with particular value                                           

db.student.find().pretty();                       - shows the records eye-catchy

db.student.insert([{first:"jimmy",last:"malhan"},{first:"goldy",last:"malhan"}]); - create multiple records at once with ARRAY OF OBJECT = ([{}]);

db.student.update({first:"tushar"},{$set:{last:"bharti"}}); - it will update the last name of all records having name as tushar 

db.student.update({first:"tushar"},{$set:{gender:"male"}}); - add extra field to the recors     (here {$set:{} = updates and set the orginal value});   

db.student.update({first:"jimmy"},{$inc:{age:29}});         - it adds & updates the field in documents      (here {$inc:{} = increment the values});

db.student.update({first:"jimmy"},{$unset:{age:1}});        - it removes the field from the record          (here {first:"jimmy"},{$unset:{age:1}});  

db.student.update({first:"tushar"},{$rename:{gender:"sex"}});- rename the field name where first ="tushar"                                                           (here {first:"tushar"},{$rename:{the column name }});                                                                  

db.student.remove({first:"goldy"});    
 - it removes the complete document from the collections student    (here {first:"tushar"}- delets where first name = tushar
    
